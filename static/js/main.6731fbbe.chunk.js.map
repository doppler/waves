{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["screenDimensions","width","window","innerWidth","height","innerHeight","App","_useState","useState","_useState2","Object","slicedToArray","dimensions","setDimensions","center","GridSpacing","_useState3","_useState4","pi2multiplier","setPi2multiplier","MaxPi2Multiplier","useEffect","requestAnimationFrame","Math","PI","addEventListener","react_default","a","createElement","id","className","toFixed","Number","Array","from","length","floor","map","_","i","x","rotationFactor","sin","y","color","strokeOpacity","Fragment","x1","y1","x2","y2","style","stroke","concat","key","cx","cy","r","fill","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6731fbbe.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst screenDimensions = () => ({\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst App = () => {\n  const [dimensions, setDimensions] = useState(screenDimensions());\n  const { width, height } = dimensions;\n  const center = { x: width / 2, y: height / 2 };\n  const GridSpacing = width / 21;\n  const SubSpacing = 10;\n  const [pi2multiplier, setPi2multiplier] = useState(21);\n  const MaxPi2Multiplier = width / (GridSpacing / SubSpacing);\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      setPi2multiplier(\n        pi2multiplier > MaxPi2Multiplier\n          ? 0\n          : pi2multiplier +\n              ((Math.PI * 2) / ((width / GridSpacing) * SubSpacing)) * 0.25\n      );\n    });\n  }, [pi2multiplier]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setDimensions(screenDimensions());\n    });\n  }, []);\n\n  return (\n    <div id=\"App\">\n      <span className=\"percentage\">\n        pi2multiplier={pi2multiplier.toFixed(8)} percentage=\n        {Number((pi2multiplier / MaxPi2Multiplier) * 100).toFixed(8)}}%\n      </span>\n      <svg width={width} height={height}>\n        {Array.from({\n          length: Math.floor(width / GridSpacing) * SubSpacing + GridSpacing\n        }).map((_, i) => {\n          let x = (i * GridSpacing) / SubSpacing;\n          let rotationFactor = Math.sin(\n            (Math.PI * 2 * pi2multiplier) / (width / x)\n          );\n          let y = center.y + (height / 2) * rotationFactor;\n          const color = -180 * rotationFactor;\n          const strokeOpacity = 1 * ((i % SubSpacing) / SubSpacing);\n          return (\n            <>\n              <line\n                x1={x}\n                y1={y}\n                x2={x}\n                y2={0}\n                style={{\n                  stroke: `hsla(${color}, 100%, 50%, ${strokeOpacity})`\n                }}\n              />\n              <circle\n                key={i}\n                cx={x}\n                cy={y}\n                r={2}\n                style={{\n                  fill: `hsla(${color}, 100%, 50%)`\n                }}\n              />\n            </>\n          );\n        })}\n      </svg>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\nif (module.hot) module.hot.accept();\n"],"sourceRoot":""}