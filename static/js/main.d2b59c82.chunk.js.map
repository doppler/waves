{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["screenDimensions","width","window","innerWidth","height","innerHeight","App","frame","_useState","useState","_useState2","Object","slicedToArray","dimensions","setDimensions","_useState3","_useState4","paused","setPaused","_useState5","_useState6","sliderVisible","setSliderVisible","center","GridSpacing","_useState7","_useState8","pi2multiplier","setPi2multiplier","MaxPi2Multiplier","pi2multiplierIncrement","Math","PI","useEffect","requestAnimationFrame","cancelAnimationFrame","handleResize","handleKeyDown","event","includes","keyCode","preventDefault","key","code","codeString","altKey","ctrlKey","metaKey","shiftKey","toLowerCase","replace","console","log","addEventListener","removeEventListener","react_default","a","createElement","id","type","min","max","onChange","Number","target","value","style","display","className","onClick","toFixed","Array","from","length","floor","map","_","i","x","rotationFactor","sin","y","color","x1","y1","x2","y2","stroke","concat","cx","cy","r","fill","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d2b59c82.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst screenDimensions = () => ({\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst App = () => {\n  const [dimensions, setDimensions] = useState(screenDimensions());\n  const [paused, setPaused] = useState(false);\n  const [sliderVisible, setSliderVisible] = useState(false);\n  const { width, height } = dimensions;\n  const center = { x: width / 2, y: height / 2 };\n  const GridSpacing = width / 21;\n  const SubSpacing = 10;\n  const [pi2multiplier, setPi2multiplier] = useState(0);\n  const MaxPi2Multiplier = width / (GridSpacing / SubSpacing);\n  const pi2multiplierIncrement =\n    ((Math.PI * 2) / ((width / GridSpacing) * SubSpacing)) * 0.25;\n  let frame;\n\n  useEffect(() => {\n    if (!paused) {\n      frame = requestAnimationFrame(() => {\n        setPi2multiplier(\n          pi2multiplier > MaxPi2Multiplier\n            ? 0\n            : pi2multiplier + pi2multiplierIncrement\n        );\n      });\n    }\n    return () => {\n      cancelAnimationFrame(frame);\n    };\n  }, [pi2multiplier, paused]);\n\n  const handleResize = () => {\n    setDimensions(screenDimensions());\n  };\n\n  const handleKeyDown = event => {\n    if ([32, 39, 37, 80].includes(event.keyCode)) event.preventDefault();\n    const { keyCode, key, code, altKey, ctrlKey, metaKey, shiftKey } = event; // eslint-disable-line no-unused-vars\n    let codeString = code.toLowerCase().replace(/arrow/, \"\");\n    console.log({ codeString, key, keyCode });\n    switch (keyCode) {\n      case 32: // space\n        setPaused(paused => !paused);\n        break;\n      case 39: // right arrow\n        setPi2multiplier(\n          pi2multiplier => pi2multiplier + pi2multiplierIncrement\n        );\n        break;\n      case 37: // left arrow\n        setPi2multiplier(\n          pi2multiplier => pi2multiplier - pi2multiplierIncrement\n        );\n        break;\n      case 80: // p\n        setSliderVisible(sliderVisible => !sliderVisible);\n        break;\n      default:\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, []);\n\n  const togglePercentageSlider = event => {};\n  return (\n    <div id=\"App\">\n      <input\n        id=\"percentage-slider\"\n        type=\"range\"\n        min={0.0}\n        max={MaxPi2Multiplier}\n        onChange={event => setPi2multiplier(Number(event.target.value))}\n        style={{ display: sliderVisible ? \"block\" : \"none\" }}\n      />\n      <span\n        className=\"percentage\"\n        onClick={togglePercentageSlider}\n        style={{ display: sliderVisible ? \"inline\" : \"none\" }}\n      >\n        pi2multiplier={pi2multiplier.toFixed(8)} percentage=\n        {Number((pi2multiplier / MaxPi2Multiplier) * 100).toFixed(8)}}%\n      </span>\n      <svg width={width} height={height}>\n        {Array.from({\n          length: Math.floor(width / GridSpacing) * SubSpacing + GridSpacing\n        }).map((_, i) => {\n          let x = (i * GridSpacing) / SubSpacing;\n          let rotationFactor = Math.sin(\n            (Math.PI * 2 * pi2multiplier) / (width / x)\n          );\n          let y = center.y + (height / 2) * rotationFactor;\n          const color = -180 * rotationFactor;\n          const strokeOpacity = 1; //* ((i % SubSpacing) / SubSpacing);\n          return (\n            <g key={i}>\n              <line\n                x1={x}\n                y1={y}\n                x2={x}\n                y2={height}\n                style={{\n                  stroke: `hsla(${color}, 100%, 50%, ${strokeOpacity})`\n                }}\n              />\n              <circle\n                cx={x}\n                cy={y}\n                r={2}\n                style={{\n                  fill: `hsla(${color}, 100%, 50%)`\n                }}\n              />\n            </g>\n          );\n        })}\n      </svg>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\nif (module.hot) module.hot.accept();\n"],"sourceRoot":""}