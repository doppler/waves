{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["screenDimensions","width","window","innerWidth","height","innerHeight","Grid","props","center","GridSpacing","x","y","react_default","a","createElement","id","Array","from","length","Math","ceil","map","_","i","key","className","x1","y1","x2","y2","App","_useState","useState","_useState2","Object","slicedToArray","dimensions","setDimensions","_useState3","_useState4","xoffset","setXoffset","MaxOffset","useEffect","requestAnimationFrame","PI","addEventListener","concat","Number","toFixed","App_Grid","floor","rotationFactor","sin","cx","cy","r","style","fill","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3879b7e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst screenDimensions = () => ({\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst Grid = props => {\n  const { center, width, height, GridSpacing } = props;\n  let x = 0 - GridSpacing + (center.x % GridSpacing);\n  let y = 0 - GridSpacing + (center.y % GridSpacing);\n  return (\n    <g id=\"grid\">\n      {Array.from({ length: Math.ceil(width / GridSpacing) }).map((_, i) => {\n        x = x + GridSpacing;\n        return (\n          <line key={i} className=\"gline\" x1={x} y1={0} x2={x} y2={height} />\n        );\n      })}\n      {Array.from({ length: Math.ceil(height / GridSpacing) }).map((_, i) => {\n        y = y + GridSpacing;\n        return (\n          <line className=\"gline\" key={i} x1={0} y1={y} x2={width} y2={y} />\n        );\n      })}\n    </g>\n  );\n};\n\nconst App = () => {\n  const [dimensions, setDimensions] = useState(screenDimensions());\n  const { width, height } = dimensions;\n  const center = { x: width / 2, y: height / 2 };\n  const GridSpacing = width / 21;\n  const SubSpacing = 10;\n  const [xoffset, setXoffset] = useState(0);\n  const MaxOffset = width / (GridSpacing / SubSpacing);\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      setXoffset(\n        xoffset > MaxOffset\n          ? 0\n          : xoffset +\n              ((Math.PI * 2) / ((width / GridSpacing) * SubSpacing)) * 0.25\n      );\n    });\n  }, [xoffset]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setDimensions(screenDimensions());\n    });\n  }, []);\n\n  return (\n    <div id=\"App\">\n      <span className=\"percentage\">{`${Number(\n        (xoffset / MaxOffset) * 100\n      ).toFixed(2)}%`}</span>\n      <svg width={width} height={height}>\n        <Grid {...{ width, height, GridSpacing, center }} />\n        {Array.from({\n          length: Math.floor(width / GridSpacing) * SubSpacing + GridSpacing\n        }).map((_, i) => {\n          let x = (i * GridSpacing) / SubSpacing;\n          let rotationFactor = Math.sin((Math.PI * 2 * xoffset) / (width / x));\n          return (\n            <circle\n              key={i}\n              cx={x}\n              cy={center.y + (height / 2) * rotationFactor}\n              r={(i % SubSpacing) + 2}\n              style={{\n                fill: `hsla(${-180 * rotationFactor}, 100%, 50%)`\n              }}\n            />\n          );\n        })}\n      </svg>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\nif (module.hot) module.hot.accept();\n"],"sourceRoot":""}